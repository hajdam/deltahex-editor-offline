/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.deltahex.dialog;

import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.text.JTextComponent;
import org.exbin.framework.gui.utils.ActionUtils;
import org.exbin.framework.gui.utils.LanguageUtils;
import org.exbin.framework.gui.utils.WindowUtils;

/**
 * Goto position dialog for hexadecimal editor.
 *
 * @version 0.1.0 2016/06/10
 * @author ExBin Project (http://exbin.org)
 */
public class GoToHexDialog extends javax.swing.JDialog {

    private int dialogOption = JOptionPane.CLOSED_OPTION;
    private final java.util.ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(GoToHexDialog.class);

    private long cursorPosition;
    private long maxPosition;
    private GO_TO_MODE goToMode = GO_TO_MODE.ABSOLUTE;

    public GoToHexDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // Spinner selection workaround from http://forums.sun.com/thread.jspa?threadID=409748&forumID=57
        ((JSpinner.DefaultEditor) positionSpinner.getEditor()).getTextField().addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (e.getSource() instanceof JTextComponent) {
                    final JTextComponent textComponent = ((JTextComponent) e.getSource());
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            textComponent.selectAll();
                        }
                    });
                }
            }
        }
        );

        init();
    }

    private void init() {
        WindowUtils.initWindow(this);
        WindowUtils.addHeaderPanel(this, resourceBundle.getString("header.title"), resourceBundle.getString("header.description"), resourceBundle.getString("header.icon"));
        WindowUtils.assignGlobalKeyListener(this, jumpButton, cancelButton);
        pack();
    }

    public long getGoToPosition() {
        long value = (Long) positionSpinner.getValue();
        if (goToMode == GO_TO_MODE.ABSOLUTE) {
            return value;
        } else {
            return cursorPosition + value;
        }
    }

    public long getCursorPosition() {
        return cursorPosition;
    }

    public void setCursorPosition(long cursorPosition) {
        this.cursorPosition = cursorPosition;
        positionSpinner.setValue(cursorPosition);
    }

    public void setMaxPosition(long maxPosition) {
        this.maxPosition = maxPosition;
        ((SpinnerNumberModel) positionSpinner.getModel()).setMaximum(maxPosition);
        positionSpinner.revalidate();
    }

    public void setSelected() {
        positionSpinner.requestFocusInWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        positionTypeButtonGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        absoluteRadioButton = new javax.swing.JRadioButton();
        relativeRadioButton = new javax.swing.JRadioButton();
        decimalPositionLabel = new javax.swing.JLabel();
        positionSpinner = new javax.swing.JSpinner();
        hexadecimalPositionLabel1 = new javax.swing.JLabel();
        hexPositionSpinner = new javax.swing.JSpinner();
        controlPanel = new javax.swing.JPanel();
        jumpButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setTitle(resourceBundle.getString("Form.title")); // NOI18N
        setLocationByPlatform(true);
        setModal(true);
        setName("Form"); // NOI18N

        mainPanel.setName("mainPanel"); // NOI18N

        positionTypeButtonGroup.add(absoluteRadioButton);
        absoluteRadioButton.setSelected(true);
        absoluteRadioButton.setText(resourceBundle.getString("GoToHexDialog.absoluteRadioButton.text")); // NOI18N
        absoluteRadioButton.setName("absoluteRadioButton"); // NOI18N
        absoluteRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absoluteRadioButtonActionPerformed(evt);
            }
        });

        positionTypeButtonGroup.add(relativeRadioButton);
        relativeRadioButton.setText(resourceBundle.getString("GoToHexDialog.relativeRadioButton.text")); // NOI18N
        relativeRadioButton.setName("relativeRadioButton"); // NOI18N
        relativeRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relativeRadioButtonActionPerformed(evt);
            }
        });

        decimalPositionLabel.setLabelFor(positionSpinner);
        decimalPositionLabel.setText(resourceBundle.getString("jumpLineLabel.text")); // NOI18N
        decimalPositionLabel.setName("decimalPositionLabel"); // NOI18N

        positionSpinner.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(0L), Long.valueOf(0L), Long.valueOf(0L), Long.valueOf(1L)));
        positionSpinner.setName("positionSpinner"); // NOI18N

        hexadecimalPositionLabel1.setLabelFor(positionSpinner);
        hexadecimalPositionLabel1.setText(resourceBundle.getString("GoToHexDialog.hexadecimalPositionLabel1.text")); // NOI18N
        hexadecimalPositionLabel1.setName("hexadecimalPositionLabel1"); // NOI18N

        hexPositionSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        hexPositionSpinner.setEnabled(false);
        hexPositionSpinner.setName("hexPositionSpinner"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(positionSpinner)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(decimalPositionLabel)
                            .addComponent(hexadecimalPositionLabel1))
                        .addGap(0, 179, Short.MAX_VALUE))
                    .addComponent(hexPositionSpinner)
                    .addComponent(absoluteRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(relativeRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(absoluteRadioButton)
                .addGap(0, 0, 0)
                .addComponent(relativeRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(decimalPositionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(positionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hexadecimalPositionLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hexPositionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        controlPanel.setName("controlPanel"); // NOI18N

        jumpButton.setText(resourceBundle.getString("jumpButton.text")); // NOI18N
        jumpButton.setName("jumpButton"); // NOI18N
        jumpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jumpButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(resourceBundle.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addContainerGap(177, Short.MAX_VALUE)
                .addComponent(jumpButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancelButton)
                .addContainerGap())
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(jumpButton))
                .addContainerGap())
        );

        getContentPane().add(controlPanel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void jumpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jumpButtonActionPerformed
        dialogOption = JOptionPane.OK_OPTION;
        WindowUtils.closeWindow(this);
    }//GEN-LAST:event_jumpButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dialogOption = JOptionPane.CANCEL_OPTION;
        WindowUtils.closeWindow(this);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void absoluteRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_absoluteRadioButtonActionPerformed
        if (goToMode == GO_TO_MODE.RELATIVE && absoluteRadioButton.isSelected()) {
            goToMode = GO_TO_MODE.ABSOLUTE;
            positionSpinner.setValue(cursorPosition + ((Long) positionSpinner.getValue()));
            ((SpinnerNumberModel) positionSpinner.getModel()).setMinimum(0);
            ((SpinnerNumberModel) positionSpinner.getModel()).setMaximum(maxPosition);
        }
    }//GEN-LAST:event_absoluteRadioButtonActionPerformed

    private void relativeRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relativeRadioButtonActionPerformed
        if (goToMode == GO_TO_MODE.ABSOLUTE && relativeRadioButton.isSelected()) {
            goToMode = GO_TO_MODE.RELATIVE;
            positionSpinner.setValue(((Long) positionSpinner.getValue()) - cursorPosition);
            ((SpinnerNumberModel) positionSpinner.getModel()).setMinimum(-cursorPosition);
            ((SpinnerNumberModel) positionSpinner.getModel()).setMaximum(maxPosition - cursorPosition);
        }
    }//GEN-LAST:event_relativeRadioButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowUtils.invokeWindow(new GoToHexDialog(new javax.swing.JFrame(), true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton absoluteRadioButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JLabel decimalPositionLabel;
    private javax.swing.JSpinner hexPositionSpinner;
    private javax.swing.JLabel hexadecimalPositionLabel1;
    private javax.swing.JButton jumpButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JSpinner positionSpinner;
    private javax.swing.ButtonGroup positionTypeButtonGroup;
    private javax.swing.JRadioButton relativeRadioButton;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the dialogOption
     */
    public int getDialogOption() {
        return dialogOption;
    }

    public enum GO_TO_MODE {
        ABSOLUTE, RELATIVE
    }
}
