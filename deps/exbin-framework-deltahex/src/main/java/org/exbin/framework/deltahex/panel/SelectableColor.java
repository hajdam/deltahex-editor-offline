/*
 * Copyright (C) ExBin Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.exbin.framework.deltahex.panel;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JColorChooser;
import javax.swing.JDialog;

/**
 * Simple color selection component.
 *
 * @version 0.1.0 2016/06/23
 * @author ExBin Project (http://exbin.org)
 */
public class SelectableColor extends javax.swing.JPanel {

    private ColorChangedListener colorChangedListener = null;
    private final String label;

    /**
     * Creates new form SelectableColor
     * @param label text label
     */
    public SelectableColor(String label) {
        this.label = label;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorPreviewPanel = new javax.swing.JPanel();
        colorSelectionButton = new javax.swing.JButton();
        colorLabel = new javax.swing.JLabel();

        colorPreviewPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout colorPreviewPanelLayout = new javax.swing.GroupLayout(colorPreviewPanel);
        colorPreviewPanel.setLayout(colorPreviewPanelLayout);
        colorPreviewPanelLayout.setHorizontalGroup(
            colorPreviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        colorPreviewPanelLayout.setVerticalGroup(
            colorPreviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        colorSelectionButton.setText("Select...");
        colorSelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorSelectionButtonActionPerformed(evt);
            }
        });

        colorLabel.setLabelFor(colorPreviewPanel);
        colorLabel.setText(label);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(colorLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(colorPreviewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorSelectionButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(colorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(colorPreviewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorSelectionButton)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void colorSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorSelectionButtonActionPerformed
        final JColorChooser colorChooser = new javax.swing.JColorChooser();
        JDialog dialog = JColorChooser.createDialog(this, "Select Color", true, colorChooser, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Color color = colorChooser.getColor();
                colorPreviewPanel.setBackground(color);
                if (colorChangedListener != null) {
                    colorChangedListener.colorChanged(color);
                }
            }
        }, null);
        dialog.setVisible(true);
    }//GEN-LAST:event_colorSelectionButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel colorLabel;
    private javax.swing.JPanel colorPreviewPanel;
    private javax.swing.JButton colorSelectionButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        colorPreviewPanel.setEnabled(enabled);
        colorLabel.setEnabled(enabled);
        colorSelectionButton.setEnabled(enabled);
    }
    
    public Color getColor() {
        return colorPreviewPanel.getBackground();
    }

    public void setColor(Color color) {
        colorPreviewPanel.setBackground(color);
    }

    public ColorChangedListener getColorChangedListener() {
        return colorChangedListener;
    }

    public void setColorChangedListener(ColorChangedListener colorChangedListener) {
        this.colorChangedListener = colorChangedListener;
    }

    public static interface ColorChangedListener {

        void colorChanged(Color color);
    }
}
